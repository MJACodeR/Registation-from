
Task 1: API Creation in Node.js

To create an API in Node.js, you'll need to use a framework like Express.js. Below is a simplified example of creating a basic RESTful API using Node.js and Express.js.

1. Initialize a Node.js project:
   If you haven't already, create a new directory for your project and initialize it using npm:

   ```bash
   mkdir my-api
   cd my-api
   npm init -y
   ```

2. Install Express.js:
   Install Express.js and save it as a dependency:

   ```bash
   npm install express --save
   ```

3. Create a JavaScript file (e.g., `app.js`) and write your API code. Here's a basic example:

   ```javascript
   const express = require('express');
   const app = express();
   const port = 3000;

   // Define a sample route
   app.get('/api/sample', (req, res) => {
     res.json({ message: 'This is a sample API endpoint' });
   });

   // Start the server
   app.listen(port, () => {
     console.log(`Server is running on port ${port}`);
   });
   ```

4. Start the server:
   Run your Node.js application to start the server:

   ```bash
   node app.js
   ```

Your basic API is now running on port 3000 with a single sample endpoint.

Now, for Task 2: API Documentation in Node.js, you can use tools like Swagger or write your documentation manually using markdown and serve it alongside your API.

Here's a simple example using markdown and Express.js to serve API documentation:

1. Create a `documentation.md` file with your API documentation:

   ```markdown
   # My API Documentation

   ## Sample Endpoint

   - **URL**: `/api/sample`
   - **Method**: `GET`
   - **Description**: This is a sample API endpoint that returns a message.

   ## Usage

   To retrieve the sample message, make a GET request to `/api/sample`.
   ```

2. Modify your `app.js` to serve the documentation:

   ```javascript
   const express = require('express');
   const app = express();
   const port = 3000;

   // Serve static files from a 'public' directory
   app.use(express.static('public'));

   // Define a sample route
   app.get('/api/sample', (req, res) => {
     res.json({ message: 'This is a sample API endpoint' });
   });

   // Start the server
   app.listen(port, () => {
     console.log(`Server is running on port ${port}`);
   });
   ```

3. Create a `public` directory and place your `documentation.md` file inside it.

4. Start the server:

   ```bash
   node app.js
   ```

Now, your API documentation will be available at `http://localhost:3000/documentation.md`.

You can enhance this documentation by using dedicated documentation tools like Swagger or tools like `express-swagger-generator` for automatic generation based on your code comments.